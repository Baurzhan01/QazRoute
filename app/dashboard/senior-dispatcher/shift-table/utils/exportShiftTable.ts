import { Workbook, Column } from "exceljs"
import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"
import type { UserWorkShift } from "@/types/coordinator.types"
import type { MonthData } from "../types/shift.types"

// üî† –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å–º–µ–Ω
function getShiftMark(shiftType?: string): string {
  switch (shiftType) {
    case "day": return "–î"
    case "night": return "–ù"
    case "vacation": return "–û"
    case "dayOff": return "–í"
    case "absent": return "–ü"
    default: return ""
  }
}

// üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
export async function exportToExcel(shifts: UserWorkShift[], monthData: MonthData) {
  const { year, month, daysInMonth } = monthData

  const headers = [
    "–§–ò–û",
    ...Array.from({ length: daysInMonth }, (_, i) => `${i + 1}`),
    "–î–µ–Ω—å", "–ù–æ—á—å", "–û—Ç–ø—É—Å–∫", "–í—ã—Ö–æ–¥–Ω–æ–π", "–ü—Ä–æ–ø—É—Å–∫"
  ]

  const data = shifts.map((user) => {
    const row: (string | number)[] = [user.fullName]
    for (let day = 1; day <= daysInMonth; day++) {
      const dateStr = `${year}-${String(month).padStart(2, "0")}-${String(day).padStart(2, "0")}`
      const shift = user.days.find((d) => d.date === dateStr)
      row.push(getShiftMark(shift?.shiftType))
    }
    row.push(user.day, user.night, user.vacation, user.dayOff, user.skip)
    return row
  })

  const workbook = new Workbook()
  const worksheet = workbook.addWorksheet("–¢–∞–±–µ–ª—å")
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  worksheet.addRow(headers)
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  data.forEach(row => worksheet.addRow(row))
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
  worksheet.getRow(1).font = { bold: true }
  worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  worksheet.columns?.forEach((column) => {
    if (column) {
      column.width = 15
    }
  })

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  const buffer = await workbook.xlsx.writeBuffer()
  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })
  const url = window.URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = `–¢–∞–±–µ–ª—å_${year}_${month}.xlsx`
  link.click()
  window.URL.revokeObjectURL(url)
}

// üßæ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
export function exportToPdf(shifts: UserWorkShift[], monthData: MonthData) {
  const { year, month, daysInMonth } = monthData
  const doc = new jsPDF("landscape")

  const headers = [
    "–§–ò–û",
    ...Array.from({ length: daysInMonth }, (_, i) => `${i + 1}`),
    "–î–µ–Ω—å", "–ù–æ—á—å", "–û—Ç–ø—É—Å–∫", "–í—ã—Ö–æ–¥–Ω–æ–π", "–ü—Ä–æ–ø—É—Å–∫"
  ]

  const data = shifts.map((user) => {
    const row: (string | number)[] = [user.fullName]
    for (let day = 1; day <= daysInMonth; day++) {
      const dateStr = `${year}-${String(month).padStart(2, "0")}-${String(day).padStart(2, "0")}`
      const shift = user.days.find((d) => d.date === dateStr)
      row.push(getShiftMark(shift?.shiftType))
    }
    row.push(user.day, user.night, user.vacation, user.dayOff, user.skip)
    return row
  })

  autoTable(doc, {
    head: [headers],
    body: data,
    styles: { fontSize: 6 },
    headStyles: { fillColor: [22, 160, 133] },
    margin: { top: 20 },
    didParseCell: (data) => {
      const val = data.cell.raw
      const colorMap: Record<string, [number, number, number]> = {
        "–î": [255, 221, 77],
        "–ù": [210, 180, 255],
        "–û": [173, 216, 230],
        "–í": [230, 230, 230],
        "–ü": [255, 150, 150],
      }

      if (typeof val === "string" && colorMap[val]) {
        data.cell.styles.fillColor = colorMap[val]
      }
    },
  })

  doc.save(`–¢–∞–±–µ–ª—å_${year}_${month}.pdf`)
}
