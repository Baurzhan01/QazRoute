"use client"

import { useEffect, useMemo, useState } from "react"
import { format } from "date-fns"
import { Download } from "lucide-react"
import { Button } from "@/components/ui/button"
import { exportUnscheduledRepairs } from "@/lib/excel/exportUnscheduledRepairs"
import { cn } from "@/lib/utils"
import type { RouteExitRepairDto } from "@/types/routeExitRepair.types"

interface UnscheduledRepairTableProps {
  repairs: RouteExitRepairDto[]
}

function shortenName(fullName: string): string {
  const parts = fullName.split(" ")
  if (parts.length < 3) return fullName
  return `${parts[0]} ${parts[1][0]}. ${parts[2][0]}.`
}

export default function UnscheduledRepairTable({ repairs }: UnscheduledRepairTableProps) {
  const [repeatRepairIds, setRepeatRepairIds] = useState<Set<string>>(new Set())

  useEffect(() => {
    const busMap = new Map<string, RouteExitRepairDto[]>()
  
    repairs.forEach((r) => {
      const busId = r.bus?.id
      if (!busId) return
      if (!busMap.has(busId)) {
        busMap.set(busId, [])
      }
      busMap.get(busId)!.push(r)
    })
  
    const repeats = new Set<string>()
    busMap.forEach((entries) => {
      if (entries.length > 1) {
        // –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 2—é –∏ –¥–∞–ª–µ–µ –∑–∞–ø–∏—Å–∏
        entries.slice(1).forEach((r) => repeats.add(r.id))
      }
    })
  
    setRepeatRepairIds(repeats)
  }, [repairs])

  return (
    <div className="overflow-x-auto">
      <div className="flex justify-end my-4">
        <Button
          variant="outline"
          onClick={() => exportUnscheduledRepairs(repairs, format(new Date(), "yyyy-MM-dd"))}
        >
          <Download className="w-4 h-4 mr-2" />
          –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        </Button>
      </div>

      <table className="w-full text-sm border">
        <thead>
          <tr className="bg-gray-100">
            <th className="p-2 border">‚Ññ</th>
            <th className="p-2 border">–î–∞—Ç–∞</th>
            <th className="p-2 border">–í—Ä–µ–º—è –∑–∞–µ–∑–¥–∞</th>
            <th className="p-2 border">–ö–æ–ª–æ–Ω–Ω–∞</th>
            <th className="p-2 border">–ú–∞—Ä—à—Ä—É—Ç / –í—ã—Ö–æ–¥</th>
            <th className="p-2 border">–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è</th>
            <th className="p-2 border">–ì–æ—Å. ‚Ññ (–ì–∞—Ä–∞–∂–Ω—ã–π ‚Ññ)</th>
            <th className="p-2 border">–ü—Ä–∏—á–∏–Ω–∞</th>
            <th className="p-2 border">–ù–∞—á–∞–ª–æ —Ä–µ–º–æ–Ω—Ç–∞</th>
            <th className="p-2 border">–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞</th>
            <th className="p-2 border">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</th>
            <th className="p-2 border">–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞</th>
            <th className="p-2 border">–ü—Ä–æ–±–µ–≥</th>
          </tr>
        </thead>
        <tbody>
          {repairs.map((r, idx) => {
            const busId = r.bus?.id
            const isRepeat = repeatRepairIds.has(r.id)
            const isLong = r.repairType === "LongTerm"
            const isFinished = Boolean(r.andTime)
            const isReady = r.isReady === true

            // üü¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–≤–µ—Ç–∞: –∑–∞–≤–µ—Ä—à–µ–Ω–æ > –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π > –ø–æ–≤—Ç–æ—Ä–Ω—ã–π
            let rowBgColor = ""
              if (isFinished) {
                rowBgColor = "bg-green-100"
              } else if (isReady) {
                rowBgColor = "bg-sky-100"
              } else if (isLong) {
                rowBgColor = "bg-red-100"
              } else if (isRepeat) {
                rowBgColor = "bg-yellow-100"
              }

            return (
              <tr key={r.id} className={cn("border", rowBgColor)}>
                <td className="p-2 border text-center">{idx + 1}</td>
                <td className="p-2 border text-center">{r.startDate || "-"}</td>
                <td className="p-2 border text-center">{r.startTime?.slice(0, 5) || "-"}</td>
                <td className="p-2 border text-center">{r.convoy?.number ? `‚Ññ${r.convoy.number}` : "-"}</td>
                <td className="p-2 border text-center">
                  {r.route?.number
                    ? `${r.route.number}${r.busLine?.number ? ` / ${r.busLine.number}` : ""}`
                    : r.reserveId
                    ? "–° —Ä–µ–∑–µ—Ä–≤–∞"
                    : r.repairId && !r.dispatchBusLineId
                    ? "–ü–ª–∞–Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç"
                    : r.repairId
                    ? "–° –∑–∞–∫–∞–∑–∞"
                    : "‚Äì"}
                </td>
                <td className="p-2 border">
                  {r.driver?.fullName
                    ? `${shortenName(r.driver.fullName)} (${r.driver.serviceNumber})`
                    : "-"}
                </td>
                <td className="p-2 border text-center">
                  {r.bus?.govNumber && r.bus?.garageNumber
                    ? `${r.bus.govNumber} (${r.bus.garageNumber})`
                    : "-"}
                </td>
                <td className="p-2 border text-red-600 font-medium">
                  <div dangerouslySetInnerHTML={{ __html: r.text || "‚Äì" }} />
                  {isRepeat && <span className="text-xs text-yellow-700"> ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–µ–∑–¥</span>}
                  {isLong && <span className="text-xs text-red-700"> ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç</span>}
                </td>
                <td className="p-2 border text-center">{r.startRepairTime?.slice(0, 5) || "‚Äì"}</td>
                <td className="p-2 border text-center">{r.endRepairTime?.slice(0, 5) || "‚Äì"}</td>
                <td className="p-2 border text-center">{r.endRepairDate || "‚Äì"}</td>
                <td className="p-2 border text-center">{r.andTime?.slice(0, 5) || "‚Äì"}</td>
                <td className="p-2 border text-center">{r.mileage ?? "‚Äì"}</td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>
  )
}
