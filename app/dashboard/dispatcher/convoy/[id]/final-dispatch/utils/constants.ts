import type { ActionLogStatus } from "@/types/actionLog.types"
import type { DayType, WorkflowStatus } from "../types"

export enum StatementAction {
  Replace = "replace",
  ReportGotOff = "gotOff",
  SendToOrder = "order",
  Complete = "complete",
  Remove = "remove",
  ReturnToLine = "return",
  ViewLog = "log",
}

export const STATEMENT_WORKFLOW_STATUSES = [
  "OnWork",
  "GotOff",
  "OnOrder",
  "Completed",
  "Rejected",
] as const satisfies readonly WorkflowStatus[]

export const ACTION_LOG_STATUS_VALUES: ActionLogStatus[] = [
  "Code102",
  "Gps",
  "OffRoad",
  "DriverIllness",
  "DriverGsmFault",
  "DriverStkFault",
  "EmergencyCall",
  "AdditionalRevolutions",
  "Accident",
  "DriverAccident",
  "MidShiftCharging",
  "TrafficJam",
  "NoCharging",
  "NoRoute",
  "LowFuel",
  "ScheduleAhead",
  "DriverDelay",
  "Distraction",
  "NoPassengers",
  "Rearrangement",
  "GlDeparture",
  "PersonalReason",
  "Order",
  "MissedRevolution",
  "NotDriverFault",
  "FromGarage",
  "MidShift",
  "TechnicalIssue",
  "Emergency",
  "Replace",
  "Return", // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ª–∏–Ω–∏—é
]

export const ACTION_LOG_STATUS_LABELS: Record<ActionLogStatus, string> = {
  Code102: "–ö–æ–¥ 102",
  Gps: "–ü—Ä–æ–±–ª–µ–º–∞ GPS",
  OffRoad: "–°–æ—à—ë–ª —Å –ª–∏–Ω–∏–∏",
  DriverIllness: "–í–æ–¥–∏—Ç–µ–ª—å –∑–∞–±–æ–ª–µ–ª",
  DriverGsmFault: "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å GSM",
  DriverStkFault: "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –°–¢–ö",
  EmergencyCall: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤",
  AdditionalRevolutions: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã",
  Accident: "–î–¢–ü",
  DriverAccident: "–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º",
  MidShiftCharging: "–ü–æ–¥–∑–∞—Ä—è–¥–∫–∞ –≤ —Å–º–µ–Ω–µ",
  TrafficJam: "–ü—Ä–æ–±–∫–∞",
  NoCharging: "–ù–µ—Ç –∑–∞—Ä—è–¥–∫–∏",
  NoRoute: "–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞",
  LowFuel: "–ú–∞–ª–æ —Ç–æ–ø–ª–∏–≤–∞",
  ScheduleAhead: "–í–ø–µ—Ä–µ–¥–∏ –≥—Ä–∞—Ñ–∏–∫–∞",
  DriverDelay: "–û–ø–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è",
  Distraction: "–û—Ç–≤–ª–µ—á–µ–Ω–∏–µ",
  NoPassengers: "–ù–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
  Rearrangement: "–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞",
  GlDeparture: "–í—ã–µ–∑–¥ –ì–õ",
  PersonalReason: "–õ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã",
  Order: "–ó–∞–∫–∞–∑",
  MissedRevolution: "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –æ–±–æ—Ä–æ—Ç",
  NotDriverFault: "–ù–µ –ø–æ –≤–∏–Ω–µ –≤–æ–¥–∏—Ç–µ–ª—è",
  FromGarage: "–í—ã–µ–∑–¥ –∏–∑ –≥–∞—Ä–∞–∂–∞",
  MidShift: "–°–µ—Ä–µ–¥–∏–Ω–∞ —Å–º–µ–Ω—ã",
  TechnicalIssue: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å",
  Emergency: "–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
  Replace: "–ó–∞–º–µ–Ω–∞",
  Return: "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ª–∏–Ω–∏—é",
}

export const STATEMENT_STATUS_LABELS: Record<string, string> = {
  OnWork: "–ù–∞ –ª–∏–Ω–∏–∏",
  GotOff: "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ö–æ–¥",
  OnOrder: "–ù–∞ –∑–∞–∫–∞–∑–µ",
  Completed: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
  Rejected: "–°–Ω—è—Ç",
}

export const routeStatusMap: Record<DayType, string> = {
  workday: "Workday",
  saturday: "Saturday",
  sunday: "Sunday",
  holiday: "Holiday",
}

export const statusMeta: Record<WorkflowStatus, { label: string; className: string; rowClass?: string }> = {
  OnWork: {
    label: "–ù–∞ –ª–∏–Ω–∏–∏",
    className: "bg-emerald-50 text-emerald-700 border border-emerald-200",
  },
  GotOff: {
    label: "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ö–æ–¥",
    // üü° –Ø—Ä–∫–∏–π —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "GotOff"
    className: "bg-yellow-100 text-yellow-800 border border-yellow-300",
    rowClass: "bg-yellow-100/90", // —è—Ä—á–µ, —á–µ–º —Ä–∞–Ω—å—à–µ
  },
  OnOrder: {
    label: "–ù–∞ –∑–∞–∫–∞–∑–µ",
    className: "bg-purple-50 text-purple-700 border border-purple-200",
    rowClass: "bg-purple-50/60",
  },
  Completed: {
    label: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    className: "bg-sky-50 text-sky-700 border border-sky-200",
    rowClass: "bg-sky-50/60",
  },
  Rejected: {
    label: "–°–Ω—è—Ç",
    className: "bg-rose-50 text-rose-700 border border-rose-200",
    rowClass: "bg-rose-50/60",
  },
  Unknown: {
    label: "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞",
    className: "bg-slate-50 text-slate-600 border border-slate-200",
  },
}

export const actionsByStatus: Record<WorkflowStatus, StatementAction[]> = {
  OnWork: [
    StatementAction.Replace,
    StatementAction.ReportGotOff,
    StatementAction.SendToOrder,
    StatementAction.Complete,
    StatementAction.Remove,
    StatementAction.ViewLog,
  ],
  GotOff: [
    StatementAction.ReturnToLine,
    StatementAction.Remove,
    StatementAction.ViewLog,
  ],
  OnOrder: [
    StatementAction.Replace,
    StatementAction.ReportGotOff,
    StatementAction.SendToOrder,
    StatementAction.Complete,
    StatementAction.Remove,
    StatementAction.ViewLog,
  ],
  Completed: [StatementAction.ViewLog],
  Rejected: [StatementAction.Replace,
    StatementAction.ReportGotOff,
    StatementAction.SendToOrder,
    StatementAction.Complete,
    StatementAction.Remove,
    StatementAction.ViewLog,
  ],
  Unknown: [
    StatementAction.Replace,
    StatementAction.ReportGotOff,
    StatementAction.SendToOrder,
    StatementAction.Complete,
    StatementAction.Remove,
    StatementAction.ViewLog,
  ],
}
