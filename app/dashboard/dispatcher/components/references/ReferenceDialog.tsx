// components/references/ReferenceDialog.tsx
"use client";

import { useMemo, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "@/components/ui/use-toast";
import { referenceService } from "@/service/referenceService";
import { releasePlanService } from "@/service/releasePlanService";
import { actionLogService } from "@/service/actionLogService";
import { statementsService } from "@/service/statementsService";
import { useConvoy } from "../../context/ConvoyContext";
import type { StatementStatus } from "@/types/statement.types";
import { formatDate } from "@/app/dashboard/dispatcher/convoy/[id]/release-plan/utils/dateUtils";
import type { ReferenceType } from "@/types/reference.types";
import type { RouteAssignment } from "@/types/releasePlanTypes";

interface ReferenceDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  assignment: RouteAssignment | null;         // —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
  displayDate: Date;                          // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏ –¥–∞—Ç—É, —á—Ç–æ–±—ã –∞–ø–¥–µ–π—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
  onCreated?: (referenceId: string, textForDescription: string) => void; // ‚¨ÖÔ∏è –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç –Ω–∞–≤–µ—Ä—Ö
}

const OPTIONS: { value: ReferenceType; label: string }[] = [
  { value: "FamilyReason", label: "–ü–æ —Å–µ–º–µ–π–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º" },
  { value: "SickByCall", label: "–ë–æ–ª–µ–∑–Ω—å –ø–æ –∑–≤–æ–Ω–∫—É (—É—Ç—Ä–æ–º)" },
  { value: "PoliceCallBeforeDeparture", label: "102 (–¥–æ –≤—ã–µ–∑–¥–∞ –Ω–∞ –ª–∏–Ω–∏—é)" },
  { value: "GasStationIssue", label: "–ê–ó–° (–ø—Ä–æ–±–∫–∏, –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)" },
  { value: "PoliceOperation", label: "–û–ü–ú (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ì–ê–ò)" },
  { value: "AccidentInDepot", label: "–î–¢–ü –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–∞—Ä–∫–∞" },
  { value: "DriverLate", label: "–û–ø–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è" },
  { value: "TechnicalIssue", label: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å" },
  { value: "AlcoholIntoxication", label: "–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –∏–Ω—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è" },
  { value: "NoCharge", label: "–ù–µ—Ç –∑–∞—Ä—è–¥–∫–∏" },
  { value: "EmergencyInDepot", label: "–ß–° (—Ç—Ä–∞–≤–º–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏)" },
  { value: "Other", label: "–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É)" },
];

const REF_LABEL: Record<ReferenceType, string> = {
  FamilyReason: "–ü–æ —Å–µ–º–µ–π–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º",
  SickByCall: "–ë–æ–ª–µ–∑–Ω—å –ø–æ –∑–≤–æ–Ω–∫—É (—É—Ç—Ä–æ–º)",
  PoliceCallBeforeDeparture: "102 (–¥–æ –≤—ã–µ–∑–¥–∞ –Ω–∞ –ª–∏–Ω–∏—é)",
  GasStationIssue: "–ê–ó–° (–ø—Ä–æ–±–∫–∏/–∫–æ–ª–æ–Ω–∫–∞)",
  PoliceOperation: "–û–ü–ú (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ì–ê–ò)",
  AccidentInDepot: "–î–¢–ü –≤ –ø–∞—Ä–∫–µ",
  DriverLate: "–û–ø–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è",
  TechnicalIssue: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å",
  AlcoholIntoxication: "–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –∏–Ω—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è",
  NoCharge: "–ù–µ—Ç –∑–∞—Ä—è–¥–∫–∏",
  EmergencyInDepot: "–ß–° –≤ –ø–∞—Ä–∫–µ",
  Other: "–î—Ä—É–≥–æ–µ",
};

export default function ReferenceDialog({
  open,
  onOpenChange,
  assignment,
  displayDate,
  onCreated,
}: ReferenceDialogProps) {
  const [type, setType] = useState<ReferenceType | "">("");
  const [description, setDescription] = useState("");
  const [loading, setLoading] = useState(false);

  // –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è Other (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ TechnicalIssue (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  const canDescribe = type === "Other" || type === "TechnicalIssue";
  const mustDescribe = type === "Other";
  const isValid = !!assignment && !!type && (!mustDescribe || description.trim().length > 0);
  const { convoyId } = useConvoy();

  const info = useMemo(() => {
    if (!assignment) return null;
    return {
      routeNumber: (assignment as any).routeNumber, // –º—ã –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –º–æ–¥–∞–ª–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      busLineNumber: assignment.busLineNumber,
      garageNumber: assignment.garageNumber ?? assignment.bus?.garageNumber ?? "‚Äî",
      stateNumber: assignment.stateNumber ?? assignment.bus?.govNumber ?? "‚Äî",
      driverName: assignment.driver?.fullName ?? "‚Äî",
      driverService: assignment.driver?.serviceNumber ?? "‚Äî",
    };
  }, [assignment]);

  const handleClose = () => {
    setType("");
    setDescription("");
    onOpenChange(false);
  };

  const buildDescriptionText = (t: ReferenceType, desc: string) => {
    const base = `üßæ –°–ø—Ä–∞–≤–∫–∞: ${REF_LABEL[t]}`;
    const extra =
      t === "Other"
        ? (desc?.trim() ? `. ${desc.trim()}` : "")
        : t === "TechnicalIssue"
        ? (desc?.trim() ? `. ${desc.trim()}` : "")
        : "";
    return `${base}${extra}`;
  };

  const handleSubmit = async () => {
    if (!assignment || !type) return;

    try {
      setLoading(true);

      // 1) —Å–æ–∑–¥–∞—ë–º —Å–ø—Ä–∞–≤–∫—É
      const res = await referenceService.create({
        dispatchBusLineId: assignment.dispatchBusLineId,
        type: type as ReferenceType,
        description: canDescribe ? description.trim() : "",
      });
      if (!res.isSuccess) throw new Error(res.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");

      // 2) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (–æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ /dispatches/update-description)
      const textForDescription = buildDescriptionText(type as ReferenceType, description);
      await releasePlanService.updateBusLineDescription(
        assignment.dispatchBusLineId,
        formatDate(displayDate),
        textForDescription
      );

      // 2.5) –î–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ ActionLog —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–ø—Ä–∞–≤–∫–∏
      try {
        // –†–∞–∑—Ä–µ—à–∏–º statementId —á–µ—Ä–µ–∑ helper
        let statementId = convoyId
          ? await releasePlanService.findStatementIdByDispatch(
              formatDate(displayDate),
              convoyId,
              assignment.dispatchBusLineId
            )
          : null;

        // Fallback: if statement not found by bus line, try by convoy+date
        if (!statementId && convoyId) {
          try {
            const list = await statementsService.getByConvoyAndDate(convoyId, formatDate(displayDate))
            statementId = list.value?.[0]?.id ?? null
          } catch {}
        }

        if (statementId) {
          const now = new Date();
          const pad = (n: number) => n.toString().padStart(2, "0");
          const time = `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;

          const driverInfo = assignment.driver?.serviceNumber
            ? `—Ç–∞–±. ‚Ññ${assignment.driver.serviceNumber}`
            : "—Ç–∞–±. ‚Ññ ‚Äî";
          const busInfo = assignment.garageNumber
            ? `–∞–≤—Ç–æ–±—É—Å ${assignment.garageNumber}`
            : assignment.bus?.garageNumber
            ? `–∞–≤—Ç–æ–±—É—Å ${assignment.bus.garageNumber}`
            : "–∞–≤—Ç–æ–±—É—Å ‚Äî";

          const details = description?.trim() ? `. ${description.trim()}` : "";
          const logDescription = `–°–ø—Ä–∞–≤–∫–∞: ${REF_LABEL[type as ReferenceType]}. ${driverInfo}, ${busInfo}${details}`;

          const statementStatus: StatementStatus = "OnWork";

          await actionLogService.create({
            statementId,
            time,
            driverId: assignment.driver?.id ?? null,
            busId: assignment.bus?.id ?? null,
            revolutionCount: 0,
            description: logDescription,
            statementStatus,
            actionStatus: String(type),
          });
        }
      } catch (e) {
        console.warn("action log create failed for reference", e);
      }

      // 3) —à–ª—ë–º —Å–æ–±—ã—Ç–∏–µ ‚Äî –ø—É—Å—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è (–µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã)
      if (typeof window !== "undefined") {
        window.dispatchEvent(
          new CustomEvent("reference:created", {
            detail: {
              dispatchBusLineId: assignment.dispatchBusLineId,
              referenceId: res.value,
              type,
              description: canDescribe ? description.trim() : "",
              textForDescription,
            },
          })
        );
      }

      toast({ title: "–°–ø—Ä–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", description: "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é." });

      // 4) —Å–æ–æ–±—â–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      onCreated?.(res.value, textForDescription);

      handleClose();
    } catch (e: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: e?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const placeholder =
    type === "Other"
      ? "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
      : type === "TechnicalIssue"
      ? "–û–ø–∏—à–∏—Ç–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å (–ø–æ –∂–µ–ª–∞–Ω–∏—é)"
      : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞";

  const hint =
    type === "Other"
      ? "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è ¬´–î—Ä—É–≥–æ–µ¬ª"
      : type === "TechnicalIssue"
      ? "–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–∏—Å–∞—Ç—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å"
      : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞";

  return (
    <Dialog open={open} onOpenChange={(o) => (o ? onOpenChange(o) : handleClose())}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—ã—Ö–æ–¥—É</DialogTitle>
          <DialogDescription>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—ã—Ö–æ–¥—É (DispatchBusLine)</DialogDescription>
        </DialogHeader>

        {/* –®–∞–ø–∫–∞ */}
        <div className="rounded-md border p-3 bg-gray-50 space-y-1">
          <div className="text-sm">
            <span className="text-gray-500">–ú–∞—Ä—à—Ä—É—Ç: </span>
            <span className="font-medium">{info?.routeNumber ?? "‚Äî"}</span>
            <span className="mx-2">‚Ä¢</span>
            <span className="text-gray-500">–í—ã—Ö–æ–¥: </span>
            <span className="font-medium">{info?.busLineNumber ?? "‚Äî"}</span>
          </div>
          <div className="text-sm">
            <span className="text-gray-500">–ê–≤—Ç–æ–±—É—Å: </span>
            <span className="font-medium">
              {info?.garageNumber} ({info?.stateNumber})
            </span>
          </div>
          <div className="text-sm">
            <span className="text-gray-500">–í–æ–¥–∏—Ç–µ–ª—å: </span>
            <span className="font-medium">
              {info?.driverName} ‚Äî —Ç–∞–±. ‚Ññ {info?.driverService}
            </span>
          </div>
        </div>

        {/* –¢–∏–ø */}
        <div className="grid gap-2">
          <Label>–¢–∏–ø —Å–ø—Ä–∞–≤–∫–∏</Label>
          <Select value={type} onValueChange={(v) => setType(v as ReferenceType)}>
            <SelectTrigger>
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø" />
            </SelectTrigger>
            <SelectContent>
              {OPTIONS.map((o) => (
                <SelectItem key={o.value} value={o.value}>
                  {o.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div className="grid gap-2">
          <Label htmlFor="ref-desc">
            –û–ø–∏—Å–∞–Ω–∏–µ {type === "Other" ? "(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" : type === "TechnicalIssue" ? "(–ø–æ –∂–µ–ª–∞–Ω–∏—é)" : "(–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"}
          </Label>
          <Textarea
            id="ref-desc"
            placeholder={placeholder}
            disabled={!canDescribe}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className={!canDescribe ? "opacity-60 cursor-not-allowed" : ""}
          />
          <div className="text-xs text-gray-500">
            {canDescribe ? `${description.trim().length} —Å–∏–º–≤–æ–ª–æ–≤. ${hint}` : hint}
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={handleClose} disabled={loading}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleSubmit} disabled={!isValid || loading}>
            {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
