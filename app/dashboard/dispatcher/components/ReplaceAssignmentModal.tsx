// ReplaceAssignmentModal.tsx
"use client"

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { toast } from "@/components/ui/use-toast"
import { useState, useEffect, useMemo } from "react"
import { handleReplaceConfirm } from "./ReplaceAssignmentModal/handleReplaceConfirm"
import { busService } from "@/service/busService"
import { driverService } from "@/service/driverService"
import AutocompleteInput from "../components/ui/AutocompleteInput"
import { getAuthData } from "@/lib/auth-utils"

interface ReplaceAssignmentModalProps {
  open: boolean
  onClose: () => void
  selectedAssignment: any
  date: string
  depotId?: string
  onReload?: () => void
  onReplaceSuccess?: (updated: any) => void
}

const typeColorMap: Record<string, string> = {
  Replaced: "bg-yellow-100 text-yellow-800",
  Order: "bg-blue-100 text-blue-800",
  RearrangementRenovation: "bg-purple-100 text-purple-800",
  RearrangingRoute: "bg-orange-100 text-orange-800",
  Permutation: "bg-green-100 text-green-800",
}

const typeLabelMap: Record<string, string> = {
  Replaced: "–ó–∞–º–µ–Ω–∞ —Å —Ä–µ–∑–µ—Ä–≤–∞",
  Order: "–° –∑–∞–∫–∞–∑–∞",
  RearrangementRenovation: "–° –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞",
  RearrangingRoute: "–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É",
  Permutation: "–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞",
}

function formatShortFIO(fullName?: string) {
  if (!fullName) return "‚Äî"
  const [last, first, middle] = fullName.split(" ")
  const initials = [first?.[0], middle?.[0]].filter(Boolean).join(".")
  return `${last} ${initials}.`
}

export default function ReplaceAssignmentModal({
  open,
  onClose,
  selectedAssignment,
  date,
  depotId,
  onReload,
  onReplaceSuccess,
}: ReplaceAssignmentModalProps) {
  const depot = depotId || getAuthData()?.busDepotId

  const [drivers, setDrivers] = useState<any[]>([])
  const [buses, setBuses] = useState<any[]>([])
  const [selectedDriverId, setSelectedDriverId] = useState<string>("")
  const [selectedBusId, setSelectedBusId] = useState<string>("")
  const [replacementType, setReplacementType] = useState<string>("Replaced")
  const [isSwap, setIsSwap] = useState(false)

  useEffect(() => {
    const loadData = async () => {
      if (!depot || !date) return

      try {
        const [driversRes, busesRes] = await Promise.all([
          driverService.getByDepotWithAssignments(depot, date),
          busService.getByDepotWithAssignments(depot, date),
        ])
        if (driversRes?.isSuccess) setDrivers(driversRes.value || [])
        if (busesRes?.isSuccess) setBuses(busesRes.value || [])
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err)
        toast({ title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", variant: "destructive" })
      }
    }
    if (open) loadData()
  }, [open, depot, date])

  const selectedDriver = useMemo(() => drivers.find((d) => d.driverId === selectedDriverId), [selectedDriverId, drivers])
  const selectedBus = useMemo(() => buses.find((b) => b.busId === selectedBusId), [selectedBusId, buses])

  useEffect(() => {
    if (!selectedDriver && !selectedBus) return

    if (selectedDriver && selectedBus) {
      if (isDriverBusy || isBusBusy) {
        setReplacementType("Permutation")
      } else {
        setReplacementType("Replaced")
      }
    } else if (selectedDriver) {
      setReplacementType(isDriverBusy ? "Permutation" : "Replaced")
    } else if (selectedBus) {
      setReplacementType(isBusBusy ? "Permutation" : "Replaced")
    }
  }, [selectedDriver, selectedBus])

  useEffect(() => {
    if (!open) {
      setSelectedDriverId("")
      setSelectedBusId("")
      setReplacementType("Replaced")
      setIsSwap(false)
    }
  }, [open])


  const isDriverBusy = !!(selectedDriver?.routeName && selectedDriver?.busLineNumber)
  const isBusBusy = !!(selectedBus?.routeName && selectedBus?.busLineNumber)

  const getDriverDisplay = (d: any) => {
    const initials = d.fullName?.split(" ").map((part: string, i: number) => i === 0 ? part : part[0] + ".").join(" ")
    const suffix = d.serviceNumber ? `(${d.serviceNumber})` : ""
    const assignment = d.routeName && d.busLineNumber
      ? ` ¬∑ –ù–∞–∑–Ω–∞—á–µ–Ω: ${d.routeName} / –≤—ã—Ö–æ–¥ ${d.busLineNumber}`
      : " ¬∑ –°–≤–æ–±–æ–¥–µ–Ω"
    return `${initials} ${suffix} ¬∑ –ö–æ–ª–æ–Ω–Ω–∞ ${d.convoyNumber}${assignment}`
  }

  const getBusDisplay = (b: any) => {
    const assignment = b.routeName && b.busLineNumber
      ? ` ¬∑ –ù–∞–∑–Ω–∞—á–µ–Ω: ${b.routeName} / –≤—ã—Ö–æ–¥ ${b.busLineNumber}`
      : " ¬∑ –°–≤–æ–±–æ–¥–µ–Ω"
    return `${b.garageNumber} / ${b.govNumber} ¬∑ –ö–æ–ª–æ–Ω–Ω–∞ ${b.convoyNumber}${assignment}`
  }

  const handleConfirm = async () => {
    if (!selectedDriver && !selectedBus) {
      toast({ title: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –∞–≤—Ç–æ–±—É—Å", variant: "destructive" })
      return
    }

    if (replacementType === "RearrangingRoute" && (!selectedDriver || !selectedBus)) {
      toast({ title: "–î–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –≤–æ–¥–∏—Ç–µ–ª—è, –∏ –∞–≤—Ç–æ–±—É—Å", variant: "destructive" })
      return
    }

    await handleReplaceConfirm({
      selectedAssignment,
      isFirstShift: true,
      selectedDriver: selectedDriver ? {
        id: selectedDriver.driverId,
        fullName: selectedDriver.fullName,
        serviceNumber: selectedDriver.serviceNumber,
        driverStatus: selectedDriver.status as any,
      } : null,
      selectedBus: selectedBus ? {
        id: selectedBus.busId,
        garageNumber: selectedBus.garageNumber,
        govNumber: selectedBus.govNumber,
        status: selectedBus.status,
      } : null,
      reserve: [],
      replacementType,
      date,
      onReplaceSuccess,
      onReload,
      onClose,
      swap: isSwap,
    })
  }

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="w-[90vw] max-w-4xl">
        <DialogHeader>
          <DialogTitle>–ó–∞–º–µ–Ω–∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ</DialogTitle>
        </DialogHeader>

        {/* üîé –ë–ª–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è */}
        <div className="bg-muted p-3 rounded mb-4 text-sm space-y-1">
          <p>üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {selectedAssignment.route?.name || selectedAssignment.routeName || "‚Äî"}</p>
          <p>üöå <b>–í—ã—Ö–æ–¥:</b> {selectedAssignment.busLineNumber || "‚Äî"}</p>
          <p>üë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> {formatShortFIO(selectedAssignment.driver?.fullName)} ({selectedAssignment.driver?.serviceNumber || "‚Äî"})</p>
          <p>üöç <b>–ê–≤—Ç–æ–±—É—Å:</b> {selectedAssignment.bus?.garageNumber} / {selectedAssignment.bus?.govNumber}</p>
        </div>

        <div className="mb-4">
          <AutocompleteInput
            label="–í–æ–¥–∏—Ç–µ–ª—å"
            items={drivers}
            selectedId={selectedDriverId}
            onSelect={setSelectedDriverId}
            idKey="driverId"
            displayValue={getDriverDisplay}
          />
          {selectedDriver && (
            <p className="text-xs mt-1 text-gray-500">
              {isDriverBusy
                ? `üõ£ –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –º–∞—Ä—à—Ä—É—Ç: ${selectedDriver.routeName} ¬∑ –≤—ã—Ö–æ–¥: ${selectedDriver.busLineNumber}`
                : "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω"}
            </p>
          )}
        </div>

        <div className="mb-4">
          <AutocompleteInput
            label="–ê–≤—Ç–æ–±—É—Å"
            items={buses}
            selectedId={selectedBusId}
            onSelect={setSelectedBusId}
            idKey="busId"
            displayValue={getBusDisplay}
          />
          {selectedBus && (
            <p className="text-xs mt-1 text-gray-500">
              {isBusBusy
                ? `üõ£ –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –º–∞—Ä—à—Ä—É—Ç: ${selectedBus.routeName} ¬∑ –≤—ã—Ö–æ–¥: ${selectedBus.busLineNumber}`
                : "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω"}
            </p>
          )}
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-1">–¢–∏–ø –∑–∞–º–µ–Ω—ã</label>
          <Select value={replacementType} onValueChange={setReplacementType}>
            <SelectTrigger>
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–º–µ–Ω—ã" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Replaced">–ó–∞–º–µ–Ω–∞ —Å —Ä–µ–∑–µ—Ä–≤–∞</SelectItem>
              <SelectItem value="Order">–° –∑–∞–∫–∞–∑–∞</SelectItem>
              <SelectItem value="RearrangementRenovation">–° –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞</SelectItem>
              <SelectItem value="RearrangingRoute">–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É</SelectItem>
              <SelectItem value="Permutation">–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞</SelectItem>
            </SelectContent>
          </Select>
          <div className={`mt-2 inline-block px-2 py-0.5 rounded text-xs font-medium ${typeColorMap[replacementType]}`}>
            {typeLabelMap[replacementType] || replacementType}
          </div>
        </div>

        {replacementType === "RearrangingRoute" && (
          <div className="mb-4 flex items-center gap-2">
            <Checkbox checked={isSwap} onCheckedChange={(v) => setIsSwap(!!v)} disabled={!selectedDriver || !selectedBus} />
            <span className="text-sm text-muted-foreground">–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏</span>
          </div>
        )}

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>–û—Ç–º–µ–Ω–∞</Button>
          <Button onClick={handleConfirm}>–ó–∞–º–µ–Ω–∏—Ç—å</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
