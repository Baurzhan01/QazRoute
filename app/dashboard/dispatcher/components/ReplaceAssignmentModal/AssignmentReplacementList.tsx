// ‚úÖ Final version of AssignmentReplacementList.tsx with support for Bus replacement dialog
"use client"

import { useMemo, useState } from "react"
import { CheckCircle2 } from "lucide-react"
import { format } from "date-fns"
import type { AssignmentReplacement } from "@/types/releasePlanTypes"
import type { DisplayBus } from "@/types/bus.types"
import type { DisplayDriver } from "@/types/driver.types"
import BusSelectDialog from "./BusSelectDialog"

// ‚úÖ Local extension with ID
type AssignmentReplacementWithId = AssignmentReplacement & {
  dispatchBusLineId: string
}

interface Props {
  items: AssignmentReplacementWithId[]
  selectedDriver: DisplayDriver | null
  selectedBus: DisplayBus | null
  onSelect: (driver: DisplayDriver, bus: DisplayBus, shift: number) => void
  search: string
  reloadAssignmentReplacements: () => void // ‚úÖ –¥–æ–±–∞–≤—å —ç—Ç–æ
}

export default function AssignmentReplacementList({
  items,
  selectedDriver,
  selectedBus,
  onSelect,
  search,
  reloadAssignmentReplacements,
}: Props) {
  const [busDialogOpen, setBusDialogOpen] = useState(false)
  const [dialogData, setDialogData] = useState<{
    driverId: string
    convoyId: string
    shift: number
    dispatchBusLineId: string
  } | null>(null)

  const filtered = useMemo(() => {
    const query = search.toLowerCase()
    return items.filter(({ firstDriver, secondDriver, bus }) => {
      const values = [
        firstDriver?.fullName,
        secondDriver?.fullName,
        bus?.garageNumber,
        bus?.govNumber,
      ].map((val) => val?.toLowerCase() || "")
      return values.some((val) => val.includes(query))
    })
  }, [items, search])

  const isSelected = (driverId?: string, busId?: string) =>
    selectedDriver?.id === driverId && selectedBus?.id === busId

  const handleRowClick = (
    driver: DisplayDriver,
    bus: DisplayBus,
    shift: number,
    convoyId?: string,
    dispatchBusLineId?: string
  ) => {
    // ‚úÖ –°–Ω–∞—á–∞–ª–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º
    onSelect(driver, bus, shift)
  
    // ‚úÖ –ó–∞—Ç–µ–º ‚Äî –µ—Å–ª–∏ –º–æ–∂–Ω–æ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–º–µ–Ω—ã –∞–≤—Ç–æ–±—É—Å–∞
    if (convoyId && dispatchBusLineId) {
      setDialogData({
        driverId: driver.id,
        convoyId,
        shift,
        dispatchBusLineId,
      })
      setBusDialogOpen(true)
    }
  }  

  const handleBusSelected = (bus: DisplayBus) => {
    if (dialogData) {
      const dummyDriver: DisplayDriver = {
        id: dialogData.driverId,
        fullName: "‚Äî",
        serviceNumber: "‚Äî",
        driverStatus: "OnWork",
      }
      onSelect(dummyDriver, bus, dialogData.shift)
    }
    setBusDialogOpen(false)
  }

  const renderDriverRow = (
    driver: AssignmentReplacement["firstDriver"] | AssignmentReplacement["secondDriver"],
    item: AssignmentReplacementWithId,
    shift: number,
    index: number
  ) => {
    if (!driver?.id) return null

    const bus: DisplayBus = {
      id: item.bus?.id ?? "",
      garageNumber: item.bus?.garageNumber ?? "‚Äî",
      govNumber: item.bus?.govNumber ?? "‚Äî",
      status: "OnWork",
    }

    const driverDisplay: DisplayDriver = {
      id: driver.id,
      fullName: driver.fullName,
      serviceNumber: (driver as any).serviceNumber ?? "‚Äî",
      driverStatus: "OnWork",
    }

    const selected = isSelected(driver.id, item.bus?.id)
    const isBusMissing = !item.bus?.id || !item.bus?.govNumber

    return (
      <tr
          key={`${driver.id}-${item.bus?.id || "no-bus"}-${shift}-${index}`}
          className={`cursor-pointer hover:bg-sky-50 ${selected ? "bg-green-100" : ""}`}
          onClick={() => onSelect(driverDisplay, bus, shift)} // ‚úÖ —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏
        >
        <td className="border px-2 py-1 text-center">{index + 1}</td>
        <td className="border px-2 py-1">{driver.fullName}</td>
        <td className="border px-2 py-1 text-center">{driver.convoyNumber ?? "‚Äî"}</td>
        <td className="border px-2 py-1 text-center">{shift}</td>
        <td className="border px-2 py-1 text-center">{item.routeNumber}</td>
        <td className="border px-2 py-1 text-center">{item.exitNumber}</td>
        <td className="border px-2 py-1 text-center">{item.bus?.garageNumber ?? "‚Äî"}</td>
        <td className="border px-2 py-1 text-center">
          <div className="flex items-center justify-center gap-1">
            <span>{item.bus?.govNumber ?? "‚Äî"}</span>
            {/* –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–±—É—Å ‚Äî –ù–ï —Ç—Ä–æ–≥–∞–µ—Ç –≤—ã–±–æ—Ä */}
            {item.bus && (
              <button
              onClick={(e) => {
                e.stopPropagation() // ‚ùó —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ
                if (item.bus?.convoyId && item.dispatchBusLineId) {
                  setDialogData({
                    driverId: driverDisplay.id,
                    convoyId: item.bus.convoyId,
                    shift,
                    dispatchBusLineId: item.dispatchBusLineId,
                  })
                  setBusDialogOpen(true)
                }
              }}
              className="text-blue-600 underline hover:text-blue-800 text-xs"
              title="–ó–∞–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–±—É—Å"
            >
              üîÅ
            </button>            
            )}
          </div>
        </td>
        <td className="border px-2 py-1 text-center">
          {selected && <CheckCircle2 className="w-4 h-4 text-green-700 inline" />}
        </td>
      </tr>
    )
  }

  return (
    <>
      <div className="max-h-[400px] overflow-y-auto border rounded text-sm">
        <table className="w-full">
          <thead className="bg-sky-100 text-sky-800">
            <tr>
              <th className="border px-2 py-1">‚Ññ</th>
              <th className="border px-2 py-1">–§–ò–û</th>
              <th className="border px-2 py-1">–ö–æ–ª–æ–Ω–Ω–∞</th>
              <th className="border px-2 py-1">–°–º–µ–Ω–∞</th>
              <th className="border px-2 py-1">–ú–∞—Ä—à—Ä—É—Ç</th>
              <th className="border px-2 py-1">–í—ã—Ö–æ–¥</th>
              <th className="border px-2 py-1">–ì–∞—Ä–∞–∂</th>
              <th className="border px-2 py-1">–ì–æ—Å. –Ω–æ–º–µ—Ä</th>
              <th className="border px-2 py-1">–í—ã–±–æ—Ä</th>
            </tr>
          </thead>
          <tbody>
            {filtered.flatMap((item, index) =>
              [
                renderDriverRow(item.firstDriver, item, 1, index),
                renderDriverRow(item.secondDriver, item, 2, index),
              ].filter(Boolean)
            )}
          </tbody>
        </table>
      </div>

      {dialogData && (
        <BusSelectDialog
          open={busDialogOpen}
          onClose={() => setBusDialogOpen(false)}
          convoyId={dialogData.convoyId}
          date={format(new Date(), "yyyy-MM-dd")}
          driverId={dialogData.driverId}
          dispatchBusLineId={dialogData.dispatchBusLineId}
          isFirstShift={dialogData.shift === 1}
          onSuccess={() => {
            setBusDialogOpen(false)
            reloadAssignmentReplacements() // ‚úÖ –≤–æ—Ç –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞
          }}
        />
      )}
    </>
  )
}
