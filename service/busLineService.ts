import apiClient from "@/app/api/apiClient";
import type { ApiResponse, BusLine, CreateBusLineRequest, UpdateBusLineRequest } from "@/types/busLine.types";

const dateToTicks = (date: Date): number => {
  const epochTicks = 621355968000000000;
  return epochTicks + date.getTime() * 10000;
};

export const busLineService = {
  getAll: async (): Promise<ApiResponse<BusLine[]>> => {
    try {
      const response = await apiClient.get<ApiResponse<BusLine[]>>(`/bus-lines`);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–æ–≤:", error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã—Ö–æ–¥—ã");
    }
  },

  getById: async (id: string): Promise<ApiResponse<BusLine>> => {
    try {
      const response = await apiClient.get<ApiResponse<BusLine>>(`/bus-lines/${id}`);
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞ –ø–æ id ${id}:`, error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã—Ö–æ–¥");
    }
  },

  getByRouteId: async (routeId: string): Promise<ApiResponse<BusLine[]>> => {
    try {
      const response = await apiClient.get<ApiResponse<BusLine[]>>(`/bus-lines/by-route/${routeId}`);
      return response.data;
    } catch (error: any) {
      if (error.response?.status === 404) {
        console.warn(`‚ö†Ô∏è –í—ã—Ö–æ–¥—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ${routeId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.`);
        return {
          isSuccess: true,
          error: null,
          statusCode: 200,
          value: [],
        };
      }
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–æ–≤ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É ${routeId}:`, error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã—Ö–æ–¥—ã");
    }
  },

  create: async (data: CreateBusLineRequest): Promise<ApiResponse<BusLine>> => {
    try {
      const response = await apiClient.post<ApiResponse<BusLine>>(`/bus-lines`, data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞:", error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥");
    }
  },

  createMultiple: async (data: { routeId: string; busLines: CreateBusLineRequest[] }): Promise<ApiResponse<BusLine[]>> => {
    try {
      console.log("üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã—Ö–æ–¥–æ–≤:", data);
      const response = await apiClient.post<ApiResponse<BusLine[]>>(`/bus-lines/bulk`, data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã—Ö–æ–¥–æ–≤:", error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥—ã");
    }
  },

  update: async (id: string, data: UpdateBusLineRequest): Promise<ApiResponse<BusLine>> => {
    try {
      const response = await apiClient.put<ApiResponse<BusLine>>(`/bus-lines/${id}`, data);
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞ ${id}:`, error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã—Ö–æ–¥");
    }
  },
  updateExitTime: async (
    id: string,
    exitTime: Date | null,
    number: string,
    endTime?: Date | null,
    shiftChangeTime?: Date | null,
    routeId?: string
  ): Promise<ApiResponse<BusLine>> => {
    try {
      const formatTime = (date: Date | null | undefined): string | null =>
        date ? date.toISOString().substring(11, 16) : null;
  
      const response = await apiClient.put<ApiResponse<BusLine>>(`/bus-lines/${id}`, {
        number, // —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º —è–≤–Ω–æ
        exitTime: formatTime(exitTime),
        endTime: formatTime(endTime),
        shiftChangeTime: formatTime(shiftChangeTime),
        routeId,
      });
  
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞ ${id}:`, error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã—Ö–æ–¥");
    }
  },

  delete: async (id: string): Promise<ApiResponse<void>> => {
    try {
      const response = await apiClient.delete<ApiResponse<void>>(`/bus-lines/${id}`);
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞ ${id}:`, error);
      throw new Error(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—ã—Ö–æ–¥");
    }
  },
};
