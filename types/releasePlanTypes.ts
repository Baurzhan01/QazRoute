// types/releasePlan/releasePlan.types.ts

import type { DisplayDriver } from "@/types/driver.types"
import type { DisplayBus } from "@/types/bus.types"
import type { RepairRecord } from "../app/dashboard/repairs/planned/hooks/usePlannedRepairs"


export type ValidDayType = "workday" | "saturday" | "sunday" | "holiday"

// üìÖ –î–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
export interface DateDto {
  year: number
  month: number
  day: number
}

export interface OrderAssignment {
  id: string
  sequenceNumber: number
  departureTime: string
  scheduleTime: string
  endTime: string
  garageNumber: string
  govNumber: string
  busId: string | null
  driver?: {
    id: string
    fullName: string
    serviceNumber: string
  }
  additionalInfo: string
  
}

// üìã –û–±—â–∞—è –¥—å—é—Ç–∏ —Ä–∞–∑–Ω–∞—Ä—è–¥–∫–∞ (Duty)
export interface DispatchDutyRecord {
  routeNumber: string
  busLineNumber: string
  govNumber?: string
  garageNumber?: string
  vinCode?: string
  busBrand?: string
  driverFullName?: string
  driverServiceNumber?: string
}

export interface DutyApiResponse {
  routeNumber: string
  exits: {
    exitNumber: string
    garageNumber: string
    govNumber: string
    vinCode?: string
    brand: string
    driverFullName: string
    driverServiceNumber?: string
  }[]
}

export interface AssignmentReplacement {
  exitNumber: string
  routeNumber: string
  dispatchBusLineId: string
  bus: {
    id?: string
    govNumber: string
    garageNumber: string
    convoyId?: string
    convoyNumber?: number
    brand?: string
  } | null
  firstDriver: {
    id?: string
    fullName: string
    convoyId?: string
    convoyNumber?: number
  } | null
  secondDriver: {
    id?: string
    fullName: string
    convoyId?: string
    convoyNumber?: number
  } | null
  departureTime: string
  endTime: string
  releasedTime: string | null
  normSolarium: number
  description: string | null
  status: string
  isReleased: boolean
  historyReplace: any
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–∞—Ä—è–¥–∫–∏
export interface DispatchRouteCreateRequest {
  convoyId: string
  date: string
}
export interface ReserveAssignmentUI {
  id: string
  sequenceNumber: number
  departureTime: string
  scheduleTime: string
  endTime: string
  garageNumber: string
  govNumber: string
  busId: string | null
  driver?: {
    id: string
    fullName: string
    serviceNumber: string
  }
  additionalInfo: string
  status: "Reserved" | "Order"
  isReplace: boolean
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∞—Ä—è–¥–∫–∏
export interface DispatchRouteUpdateRequest {
  dispatchRouteId: string
  busLines: BusLineDto[]
}

// DTO –≤—ã—Ö–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
export interface BusLineDto {
  id: string
  busId: string | null
  driver1Id: string | null
  driver2Id: string | null
  departureTime: string
  endTime: string
}

// DTO –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ–±—É—Å–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥
export interface DispatchBusLineDto {
  dispatchBusLineId: string
  driver1Id: string | null
  driver2Id: string | null
  busId: string | null
}

// DTO –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≤—ã—Ö–æ–¥
export interface BusLineAssignmentRequest {
  dispatchBusLineId: string
  driver1Id: string | null
  driver2Id: string | null
  busId: string | null
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–µ–∑–µ—Ä–≤
export interface ReserveAssignmentDto {
  driverId?: string | null
  busId?: string | null
  description?: string | null
}


// üöå –í—ã—Ö–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞ (Departure)
export interface Departure {
  id: string
  departureNumber: number
  departureTime: string
  scheduleTime: string
  additionalInfo: string
  endTime: string
  shift2Time?: string
  shift2AdditionalInfo?: string
  isModified?: boolean

  bus?: DisplayBus
  driver?: DisplayDriver
  shift2Driver?: DisplayDriver

  busLine?: {
    id: string
    number: string
    exitTime?: string | null
    endTime?: string | null
    shiftChangeTime?: string | null; // ‚Üê –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Ç —ç—Ç–æ
  }
}

// ‚ûï –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è Departure —Å –º–µ—Ç–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
export type LocalDeparture = Departure & {
  shift2AdditionalInfo: string
  shift2Time: string
  isModified?: boolean
}

// üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –ø–ª–∞–Ω–∞ –≤—ã–ø—É—Å–∫–∞
export interface DispatchRoute {
  routeId: string
  routeNumber: string
  startStation: string
  endStation: string
  busLineNumber: number
  assignedDrivers: {
    driverId: string
    driverName: string
  }[]
}

// üîµ –í–æ–¥–∏—Ç–µ–ª—å –≤ —Ä–µ–∑–µ—Ä–≤–µ
export interface ReserveDriver {
  id: string
  personnelNumber: string
  firstName: string
  lastName: string
  middleName?: string
}

// üìÖ –ü–ª–∞–Ω –≤—ã–ø—É—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
export interface DayPlan {
  date: string
  routes: DispatchRoute[]
  reserves: ReserveDriver[]
}

export interface AssignReserveItem {
  id: string
  driverId: string
  driverFullName: string
  driverTabNumber: string
  garageNumber: string
  govNumber: string
  isReplace: boolean
  description: string | null
}

export interface AssignUnplannedDispatchResponse {
  date: string
  reserves: AssignReserveItem[]
  routes: {
    routeId: string
    routeNumber: string
  }[]
  busLines: {
    busLineId: string
    dispatchBusLineId: string
    busLineNumber: string
    routeId: string
    routeNumber: string
    endTime: string
    exitTime: string
    firstDriver?: {
      id: string
      fullName: string
      serviceNumber: string
    } | null
    bus?: {
      id: string
      garageNumber: string
      govNumber: string
    } | null
  }[]
}

export interface FinalDispatchForRepair {
  date: string;
  routes: {
    routeId: string;
    routeNumber: string;
    busLines: {
      dispatchBusLineId: string;
      bus?: {
        id: string; // ‚Üê üîß –¥–æ–±–∞–≤—å —ç—Ç–æ
        govNumber: string;
        garageNumber: string;
      };
      firstDriver?: {
        id: string; // ‚Üê üîß –¥–æ–±–∞–≤—å —ç—Ç–æ
        fullName: string;
      };
    }[];
  }[];
  reserves: any[];
}


// üèÅ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–Ω–∞—Ä—è–¥–∫–∞
export interface FinalDispatchData {
  date: string
  routeGroups: RouteGroup[]
  reserveAssignments: ReserveAssignment[]
  repairBuses: string[]
  dayOffBuses: string[]
  driverStatuses: {
    DayOff?: string[]
    OnVacation?: string[]
    OnSickLeave?: string[]
    Intern?: string[]
    total?: number
  }
  // üÜï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–º–µ–Ω—ã (optional ‚Äî —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Å—Ç–∞)
  buses?: DisplayBus[]
  drivers?: DisplayDriver[]
  reserve?: ReserveReplacementCandidate[]
  orders: OrderAssignment[] // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ // –∏–ª–∏ OrderAssignment[] –µ—Å–ª–∏ —É —Ç–µ–±—è –æ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
  scheduledRepairs: RepairRecord[]
}

export interface ReserveReplacementCandidate {
  id: string
  busId: string
  driverId: string
  driverFullName: string
  driverTabNumber: string
  garageNumber: string
  govNumber: string
  description?: string
  isReplace: boolean
}


export enum DispatchBusLineStatus {
  Undefined = 0,
  Released = 1,                     // –í—ã–ø—É—â–µ–Ω–æ
  Replaced = 2,                     // –ó–∞–º–µ–Ω–∞ ‚Äî –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
  Permutation = 3,                  // –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî –≤ –≤—ã—Ö–æ–¥–Ω–æ–π
  Removed = 4,                      // –°–Ω—è—Ç–æ

  RearrangingRoute = 5,            // –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
  RearrangementRenovation = 6,     // –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Ä–µ–º–æ–Ω—Ç–∞
  Oder = 7                         // –° –∑–∞–∫–∞–∑–∞ (–≤–æ–∑–º–æ–∂–Ω–æ Order?)
}

export interface RouteGroup {
  routeId: string
  routeNumber: string
  assignments: RouteAssignment[]
}

export interface RouteAssignment {
  dispatchBusLineId: string;
  busLineNumber: string;
  description?: string // üëà –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
  garageNumber: string
  stateNumber: string
  bus?: {
    id: string
    garageNumber: string
    govNumber: string
  }
  driver: {
    id: string
    serviceNumber: string
    fullName: string
  } | null
  departureTime: string
  status?: DispatchBusLineStatus
  isRealsed: boolean
  fuelAmount?: string 
  releasedTime?: string
  scheduleTime: string
  additionalInfo?: string
  shift2AdditionalInfo?: string
  shift2Driver?: {
    id: string
    serviceNumber: string
    fullName: string
  }
  endTime: string
}

export interface ReserveAssignment {
  id: string;
  dispatchBusLineId: string;
  sequenceNumber: number
  garageNumber: string
  govNumber: string
  driver: {
    id: string
    serviceNumber: string
    fullName: string
  }
  departureTime: string
  scheduleTime: string
  status?: DispatchBusLineStatus
  isReplace:boolean
  time?: string | null  // ‚Üê –≤–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ!
  additionalInfo?: string
  shift2Driver?: {
    id: string
    serviceNumber: string
    fullName: string
  }
  endTime: string
}

export interface TimeObject {
  hour: number
  minute: number
}

export interface FullDispatchResponse {
  routeNumber: string
  busLines: FullDispatchBusLine[]
  // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è:
  repairBuses?: string[];
  dayOffBuses?: string[];
  driverStatuses?: {
    DayOff?: string[];
    OnVacation?: string[];
    OnSickLeave?: string[];
    Intern?: string[];
    total?: number;
  };
}

export interface FullDispatchBusLine {
  id: string
  busLine: {
    id: string
    number: string
    exitTime: TimeObject | string
    endTime: TimeObject | string
  }
  bus?: {
    id: string
    garageNumber: string
    govNumber: string
  }
  driver1?: {
    id: string
    fullName: string
    serviceNumber: string
  }
  driver2?: {
    id: string
    fullName: string
    serviceNumber: string
  }
  scheduleStart?: TimeObject
  status?: DispatchBusLineStatus
  scheduleShiftChange?: TimeObject
}
