// types/releasePlan/releasePlan.types.ts

import type { DisplayDriver, Driver } from "@/types/driver.types"
import type { DisplayBus } from "@/types/bus.types"

export type ValidDayType = "workday" | "saturday" | "sunday" | "holiday"

// üìÖ –î–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
export interface DateDto {
  year: number
  month: number
  day: number
}

// ‚û°Ô∏è –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∞—Ä—è–¥–∫–∏
export interface DispatchRouteCreateRequest {
  convoyId: string
  routeId: string
  date: string
}
// types/releasePlanTypes.ts

export type LocalDeparture = Departure & {
  shift2AdditionalInfo: string;
  shift2Time: string;
  isModified?: boolean;
};

export interface ReserveAssignmentDto {
  driverId?: string
  busId?: string
}

export interface DispatchRouteUpdateRequest {
  dispatchRouteId: string
  busLines: BusLineDto[]
}

export interface BusLineDto {
  id: string
  busId: string | null;
  driver1Id: string | null;
  driver2Id: string | null;
  departureTime: string;
  endTime: string;
}

// ‚û°Ô∏è –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑–µ—Ä–≤–æ–º
export interface ReserveAssignmentDto {
  driverId?: string
  busId?: string
}

// ‚û°Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥ –∞–≤—Ç–æ–±—É—Å–∞
export interface DispatchBusLineDto {
  dispatchBusLineId: string
  driver1Id: string | null
  driver2Id: string | null
  busId: string | null
}

export interface BusLineAssignmentRequest {
  dispatchBusLineId: string
  driver1Id: string | null
  driver2Id: string | null
  busId: string | null
}

// üöå –û—Å–Ω–æ–≤–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∞ (Departure = 1 –≤—ã—Ö–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞)
export interface Departure {
  id: string
  departureNumber: number
  departureTime: string
  scheduleTime: string
  additionalInfo: string
  endTime: string
  shift2Time?: string
  shift2AdditionalInfo?: string
  bus?: DisplayBus
  driver?: DisplayDriver
  shift2Driver?: DisplayDriver
}

// üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –¥–Ω–µ
export interface DispatchRoute {
  routeId: string
  routeNumber: string
  startStation: string
  endStation: string
  busLineNumber: number
  assignedDrivers: {
    driverId: string
    driverName: string
  }[]
}

// üîµ –í–æ–¥–∏—Ç–µ–ª—å –≤ —Ä–µ–∑–µ—Ä–≤–µ
export interface ReserveDriver {
  id: string
  personnelNumber: string
  firstName: string
  lastName: string
  middleName?: string
}

// üìÖ –ü–ª–∞–Ω –≤—ã–ø—É—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
export interface DayPlan {
  date: string
  routes: DispatchRoute[]
  reserves: ReserveDriver[]
}

// üèÅ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–Ω–∞—Ä—è–¥–∫–∞
export interface FinalDispatchData {
  date: string;                    // –î–∞—Ç–∞ —Ä–∞–∑–Ω–∞—Ä—è–¥–∫–∏
  routeGroups: RouteGroup[];       // –ì—Ä—É–ø–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
  reserveAssignments: ReserveAssignment[]; // –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–µ
}

export interface RouteGroup {
  routeId: string;                 // ID –º–∞—Ä—à—Ä—É—Ç–∞
  routeNumber: string;             // –ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
  assignments: RouteAssignment[];  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—ã—Ö–æ–¥–∞–º
}

export interface RouteAssignment {
  garageNumber: string
  stateNumber: string
  driver: {
    serviceNumber: string
    fullName: string
  } | null
  departureTime: string
  scheduleTime: string
  additionalInfo?: string
  shift2AdditionalInfo?: string
  shift2Driver?: {
    serviceNumber: string
    fullName: string
  }
  endTime: string
}

export interface ReserveAssignment {
  sequenceNumber: number
  garageNumber: string
  stateNumber: string
  driver: {
    serviceNumber: string
    fullName: string
  }
  departureTime: string
  scheduleTime: string
  additionalInfo?: string
  shift2Driver?: {
    serviceNumber: string
    fullName: string
  }
  endTime: string
}



